import javax.swing.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class SauvegardeController {
    public void saveData(int[][] sudokuGridData, JFrame frame) {
        JFileChooser fileChooser = new JFileChooser();
        int userSelection = fileChooser.showSaveDialog(frame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            try {
                String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
                for (int i = 0; i < 9; i++) {
                    for (int j = 0; j < 9; j++) {
                        writer.write(String.valueOf(sudokuGridData[i][j]));
                        // Ajouter un espace ou un autre caractère de séparation si nécessaire
                        // Par exemple, writer.write(" ") pour séparer les nombres par un espace
                    }
                    writer.newLine();
                }
                writer.close();
                System.out.println("Données sauvegardées avec succès.");
            } catch (IOException e) {
                System.err.println("Erreur lors de la sauvegarde des données : " + e.getMessage());
            }
        }
    }
}


import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.border.Border;

public class SudokuInterface extends JFrame {
    private GrilleSudoku grille;
    private JButton[][] boutons;
    private JButton sauvegarderButton;
    private JButton chargerButton;

    public SudokuInterface(GrilleSudoku grille) {
        super("Sudoku");
        this.grille = grille;

        boutons = new JButton[9][9];
        // Initialisation de l'interface graphique
        JPanel grillePanel = new JPanel(new GridLayout(3, 3));
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                JPanel sousGrillePanel = new JPanel(new GridLayout(3, 3));
                Border border = BorderFactory.createLineBorder(Color.BLACK, 5); // Bordure de largeur 5
                sousGrillePanel.setBorder(border);
                for (int k = 0; k < 3; k++) {
                    for (int l = 0; l < 3; l++) {
                        boutons[i * 3 + k][j * 3 + l] = new JButton();
                        boutons[i * 3 + k][j * 3 + l].setFont(new Font("Arial", Font.PLAIN, 20));
                        boutons[i * 3 + k][j * 3 + l].setPreferredSize(new Dimension(50, 50));
                        boutons[i * 3 + k][j * 3 + l].setBackground(Color.WHITE); // Couleur blanche
                        // Ajout des coordonnées comme attribut du bouton
                        boutons[i * 3 + k][j * 3 + l].putClientProperty("row", i * 3 + k);
                        boutons[i * 3 + k][j * 3 + l].putClientProperty("col", j * 3 + l);

                        sousGrillePanel.add(boutons[i * 3 + k][j * 3 + l]);
                    }
                }
                grillePanel.add(sousGrillePanel);
            }
        }

        sauvegarderButton = new JButton("Sauvegarder");
        chargerButton = new JButton("Charger");

        // Ajout des boutons de sauvegarde et de chargement
        JPanel buttonPanel = new JPanel(new GridLayout(1, 2));
        buttonPanel.add(sauvegarderButton);
        buttonPanel.add(chargerButton);
        add(buttonPanel, BorderLayout.SOUTH);

        // Ajout du grillePanel à la fenêtre principale
        add(grillePanel, BorderLayout.CENTER);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);

        // Ajout des actions pour les boutons de sauvegarde et de chargement
        sauvegarderButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                int choice = fileChooser.showSaveDialog(SudokuInterface.this);
                if (choice == JFileChooser.APPROVE_OPTION) {
                    File file = fileChooser.getSelectedFile();
                    sauvegarderGrille(file);
                }
            }
        });

        chargerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                int choice = fileChooser.showOpenDialog(SudokuInterface.this);
                if (choice == JFileChooser.APPROVE_OPTION) {
                    File file = fileChooser.getSelectedFile();
                    chargerGrille(file);
                }
            }
        });
    }

    private void sauvegarderGrille(File file) {
        try (ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(file))) {
            outputStream.writeObject(grille);
            System.out.println("Grille sauvegardée avec succès.");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Erreur lors de la sauvegarde de la grille : " + ex.getMessage());
        }
    }

    private void chargerGrille(File file) {
        try (ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(file))) {
            grille = (GrilleSudoku) inputStream.readObject();
            refreshUI();
            System.out.println("Grille chargée avec succès.");
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Erreur lors du chargement de la grille : " + ex.getMessage());
        }
    }

    private void refreshUI() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                boutons[i][j].setText(Integer.toString(grille.getCellule(i, j).getValeur()));
            }
        }
    }

    public JButton[][] getBoutons() {
        return boutons;
    }

    
}

import java.io.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class ChargerSauvegardeController {
    public int[][] loadGridData(String filePath, JFrame frame) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            int[][] gridData = new int[9][9];
            String line;
            int row = 0;
            while ((line = reader.readLine()) != null && row < 9) {
                for (int col = 0; col < 9 && col < line.length(); col++) {
                    char c = line.charAt(col);
                    if (c == '.') {
                        gridData[row][col] = 0;
                    } else if (Character.isDigit(c)) {
                        gridData[row][col] = Character.getNumericValue(c);
                    } else {
                        gridData[row][col] = -1;
                    }
                }
                row++;
            }
            reader.close();
            System.out.println("Grille chargée avec succès.");
            return gridData;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Erreur lors du chargement de la grille : " + e.getMessage());
        }
        return null;
    }
}

import javax.swing.*;

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            GrilleSudoku grille = SudokuFileIO.chargerGrilleVide(); // Charger une grille vide au démarrage
            SudokuInterface sudokuInterface = new SudokuInterface(grille);
            SudokuController controller = new SudokuController(grille, sudokuInterface);
            sudokuInterface.setVisible(true); // Assurez-vous que l'interface est visible
        });
    }
}

import javax.swing.*;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException;


public class SudokuFileIO {
    private static final String FILENAME = "sudoku.txt";

    public static void sauvegarderGrilleVide() {
        try (PrintWriter writer = new PrintWriter(new FileWriter(FILENAME))) {
            for (int ligne = 0; ligne < 9; ligne++) {
                for (int colonne = 0; colonne < 9; colonne++) {
                    writer.print("0"); // Grille vide
                }
                writer.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static GrilleSudoku chargerGrilleVide() {
        return new GrilleSudoku(); // Retourne une nouvelle grille vide
    }
}

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

public class SudokuFileHandler {
    public static GrilleSudoku chargerGrille(String cheminFichier) throws FileNotFoundException {
        GrilleSudoku grille = new GrilleSudoku();
        File fichier = new File(cheminFichier);
        Scanner scanner = new Scanner(fichier);
        
        for (int i = 0; i < 9; i++) {
            String ligne = scanner.nextLine();
            for (int j = 0; j < 9; j++) {
                int valeur = Character.getNumericValue(ligne.charAt(j));
                grille.setCellule(i, j, valeur);
            }
        }
        
        scanner.close();
        return grille;
    }

    public static void sauvegarderGrille(GrilleSudoku grille, String cheminFichier) throws FileNotFoundException {
        PrintWriter writer = new PrintWriter(cheminFichier);
        
        for (int i = 0; i < 9; i++) {
            StringBuilder ligne = new StringBuilder();
            for (int j = 0; j < 9; j++) {
                ligne.append(grille.getCellule(i, j).getValeur());
            }
            writer.println(ligne);
        }
        
        writer.close();
    }
}

import javax.swing.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;


public class SudokuController implements ActionListener {
    private GrilleSudoku grille;
    private SudokuInterface sudokuInterface;

    public SudokuController(GrilleSudoku grille, SudokuInterface sudokuInterface) {
        this.grille = grille;
        this.sudokuInterface = sudokuInterface;

        for (JButton[] row : sudokuInterface.getBoutons()) {
            for (JButton button : row) {
                button.addActionListener(this); // Ajout de l'action listener pour chaque bouton de la grille
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton selectedButton = (JButton) e.getSource();

        // Récupérer les coordonnées de la case sélectionnée à partir du bouton cliqué
        int row = (int) selectedButton.getClientProperty("row");
        int col = (int) selectedButton.getClientProperty("col");

        // Demander à l'utilisateur d'entrer une valeur
        String inputValue = JOptionPane.showInputDialog("Entrez un nombre entre 1 et 9 :");
        // Vérifier si l'entrée n'est pas nulle
        if (inputValue != null && !inputValue.isEmpty()) {
            try {
                // Convertir la valeur en entier
                int value = Integer.parseInt(inputValue);
                // Vérifier si la valeur est dans la plage valide
                if (value >= 1 && value <= 9) {
                    // Vérifier si la valeur est valide pour cette cellule
                    if (grille.estValide(row, col, value)) {
                        // Mettre à jour la valeur de la cellule dans la grille
                        grille.setCellule(row, col, value);
                        // Mettre à jour l'affichage du bouton
                        selectedButton.setText(inputValue);
                    } else {
                        JOptionPane.showMessageDialog(null, "Nombre invalide ! Veuillez entrer un nombre valide.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Le nombre doit être compris entre 1 et 9.");
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Format de nombre invalide ! Veuillez entrer un nombre valide.");
            }
        }
    }
}

public class GrilleSudoku {
    private Cellule[][] grille;

    public GrilleSudoku() {
        grille = new Cellule[9][9];
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                grille[i][j] = new Cellule();
            }
        }
    }

    public Cellule getCellule(int ligne, int colonne) {
        return grille[ligne][colonne];
    }

    public void setCellule(int ligne, int colonne, int valeur) {
        grille[ligne][colonne].setValeur(valeur);
    }

    public boolean estValide(int ligne, int colonne, int valeur) {
        // Vérifie si la valeur est déjà présente dans la même ligne
        for (int i = 0; i < 9; i++) {
            if (i != colonne && grille[ligne][i].getValeur() == valeur) {
                return false;
            }    
        }

        // Vérifie si la valeur est déjà présente dans la même colonne
        for (int j = 0; j < 9; j++) {
            if (j != ligne && grille[j][colonne].getValeur() == valeur) {
                return false;
            }
        }

        // Vérifie si la valeur est déjà présente dans le même bloc 3x3
        int blocLigne = ligne / 3 * 3;
        int blocColonne = colonne / 3 * 3;
        for (int i = blocLigne; i < blocLigne + 3; i++) {
            for (int j = blocColonne; j < blocColonne + 3; j++) {
                if (grille[i][j].getValeur() == valeur) {
                    return false;
                }
            }
        }

        return true; // Retourne true si la valeur est valide
    }

    public boolean estComplet() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (grille[i][j].estVide()) {
                    return false;
                }
            }
        }
        return true;
    }
}

import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Cellule implements Serializable {
    private int valeur;

    public Cellule() {
        this.valeur = 0; // Par défaut, une cellule est vide
    }

    public Cellule(int valeur) {
        if (valeur < 0 || valeur > 9) {
            throw new IllegalArgumentException("La valeur d'une cellule doit être entre 0 et 9 inclus.");
        }
        this.valeur = valeur;
    }

    public int getValeur() {
        return valeur;
    }

    public void setValeur(int valeur) {
        this.valeur = valeur;
    }

    public boolean estVide() {
        return valeur == 0;
    }

    @Override
    public String toString() {
        return Integer.toString(valeur);
    }
}
