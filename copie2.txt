import javax.swing.*;

public class VerifierView {
    private JFrame frame;
    private JButton verifierButton;

    public VerifierView() {
        frame = new JFrame("Vérifier Sudoku");
        frame.setSize(200, 100);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

        verifierButton = new JButton("Vérifier");
        frame.add(verifierButton);
    }

    public void show() {
        frame.setVisible(true);
    }

    public JButton getVerifierButton() {
        return verifierButton;
    }
}

public class VerifierModel {
    private int[][] grid; // Représentation des données de la grille

    public VerifierModel(int[][] grid) {
        this.grid = grid;
    }

    public boolean verify() {
        // Vérification des lignes
        for (int row = 0; row < 9; row++) {
            if (!isUnique(getRow(row))) {
                return false;
            }
        }

        // Vérification des colonnes
        for (int col = 0; col < 9; col++) {
            if (!isUnique(getColumn(col))) {
                return false;
            }
        }

        // Vérification des régions
        for (int row = 0; row < 9; row += 3) {
            for (int col = 0; col < 9; col += 3) {
                if (!isUnique(getRegion(row, col))) {
                    return false;
                }
            }
        }

        return true;
    }

    private boolean isUnique(int[] nums) {
        boolean[] seen = new boolean[10];
        for (int num : nums) {
            if (num != 0) {
                if (seen[num]) {
                    return false;
                }
                seen[num] = true;
            }
        }
        return true;
    }

    // Méthodes pour obtenir une ligne, une colonne ou une région de la grille
    private int[] getRow(int row) {
        return grid[row];
    }

    private int[] getColumn(int col) {
        int[] column = new int[9];
        for (int i = 0; i < 9; i++) {
            column[i] = grid[i][col];
        }
        return column;
    }

    private int[] getRegion(int startRow, int startCol) {
        int[] region = new int[9];
        int index = 0;
        for (int row = startRow; row < startRow + 3; row++) {
            for (int col = startCol; col < startCol + 3; col++) {
                region[index++] = grid[row][col];
            }
        }
        return region;
    }
}

import javax.swing.JOptionPane;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JFrame; // Importez JFrame si ce n'est pas déjà fait

public class VerifierController implements ActionListener {
    private VerifierModel model;
    private VerifierView view;

    public VerifierController(VerifierModel model, VerifierView view) {
        this.model = model;
        this.view = view;
        // Ajouter le contrôleur comme auditeur du bouton de vérification
        view.getVerifierButton().addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if (source == view.getVerifierButton()) {
            if (model.verify()) {
                // Utilisez le cadre JFrame directement sans passer par la méthode getFrame()
                JOptionPane.showMessageDialog((JFrame)view.getVerifierButton().getTopLevelAncestor(), "Grille valide !");
            } else {
                // Utilisez le cadre JFrame directement sans passer par la méthode getFrame()
                JOptionPane.showMessageDialog((JFrame)view.getVerifierButton().getTopLevelAncestor(), "Grille invalide !");
            }
        }
    }
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SudokuView {
    private JFrame frame;
    private JTextField[][] gridTextFields;
    private SudokuController controller;

    public SudokuView() {
        frame = new JFrame("Sudoku");
        frame.setSize(600, 600);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel mainPanel = new JPanel(new GridLayout(3, 3));

        gridTextFields = new JTextField[9][9];
        Font textFieldFont = new Font(Font.SANS_SERIF, Font.PLAIN, 18);

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                JPanel subPanel = new JPanel(new GridLayout(3, 3));
                subPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));

                for (int m = i * 3; m < (i + 1) * 3; m++) {
                    for (int n = j * 3; n < (j + 1) * 3; n++) {
                        JTextField textField = new JTextField();
                        textField.setPreferredSize(new Dimension(50, 50));
                        textField.setFont(textFieldFont);
                        subPanel.add(textField);
                        gridTextFields[m][n] = textField;
                    }
                }

                mainPanel.add(subPanel);
            }
        }

        frame.add(mainPanel);
        createMenuBar();
    }

    private void createMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = new JMenu("Menu");
        JMenuItem menuItem = new JMenuItem("Retour au Menu");
        JMenuItem sauvegarder = new JMenuItem("Sauvegarder");
        JMenuItem verifier = new JMenuItem("Vérifier");
        JMenuItem charger = new JMenuItem("Charger Sauvegarde");

        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose();
                MenuView menuView = new MenuView();
                menuView.show();
            }
        });

        sauvegarder.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                SauvegardeController sauvegardeController = new SauvegardeController();
                int[][] sudokuGridData = getSudokuGridData();
                sauvegardeController.saveData(sudokuGridData, frame);
            }
        });

        verifier.addActionListener(e -> {
            int[][] sudokuGridData = getSudokuGridData();
            VerifierModel verifierModel = new VerifierModel(sudokuGridData);
            if (verifierModel.verify()) {
                showMessage("La grille est correcte !");
            } else {
                showMessage("La grille contient des erreurs.");
            }
        });

        charger.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                int userSelection = fileChooser.showOpenDialog(frame);

                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                    ChargerSauvegardeController chargerController = new ChargerSauvegardeController();
                    int[][] loadedGridData = chargerController.loadGridData(filePath, frame);
                    if (loadedGridData != null) {
                        // Charger les données dans les champs de la grille
                        fillGridTextFields(loadedGridData);
                    }
                }
            }
        });

        menu.add(menuItem);
        menu.add(sauvegarder);
        menu.add(verifier);
        menu.add(charger);
        menuBar.add(menu);
        frame.setJMenuBar(menuBar);
    }

    public void display() {
        frame.setVisible(true);
    }

    public JTextField[][] getGridTextFields() {
        return gridTextFields;
    }

    public void showMessage(String message) {
        JOptionPane.showMessageDialog(frame, message);
    }

    public int[][] getSudokuGridData() {
        int[][] gridData = new int[9][9];
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                JTextField textField = gridTextFields[i][j];
                String text = textField.getText();
                if (text.isEmpty()) {
                    gridData[i][j] = 0;
                } else {
                    gridData[i][j] = Integer.parseInt(text);
                }
            }
        }
        return gridData;
    }

    public void fillGridTextFields(int[][] data) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                JTextField textField = gridTextFields[i][j];
                int value = data[i][j];
                // Si la valeur est 0, afficher une chaîne vide
                textField.setText(value != 0 ? String.valueOf(value) : "");
            }
        }
    }

    public void addController(SudokuController controller) {
        this.controller = controller;
    }
}

public class SudokuGrid {
    private int[][] grid;

    public SudokuGrid() {
        // Initialisation de la grille avec des zéros
        grid = new int[9][9];
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                grid[i][j] = 0;
            }
        }
    }

    public boolean isValidMove(int row, int col, int num) {
        // Vérifie si le placement du nombre est valide dans la grille
        if (isValidRow(row, num) && isValidColumn(col, num) && isValidBox(row - row % 3, col - col % 3, num)) {
            return true;
        }
        return false;
    }

    private boolean isValidRow(int row, int num) {
        // Vérifie si le nombre est déjà présent dans la ligne
        for (int col = 0; col < 9; col++) {
            if (grid[row][col] == num) {
                return false;
            }
        }
        return true;
    }

    private boolean isValidColumn(int col, int num) {
        // Vérifie si le nombre est déjà présent dans la colonne
        for (int row = 0; row < 9; row++) {
            if (grid[row][col] == num) {
                return false;
            }
        }
        return true;
    }

    private boolean isValidBox(int startRow, int startCol, int num) {
        // Vérifie si le nombre est déjà présent dans la boîte 3x3
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (grid[row + startRow][col + startCol] == num) {
                    return false;
                }
            }
        }
        return true;
    }

    public void setNumber(int row, int col, int num) {
        // Place un nombre dans la grille
        grid[row][col] = num;
    }

    public int getNumber(int row, int col) {
        // Récupère le nombre à une position donnée dans la grille
        return grid[row][col];
    }

    public boolean isGridFull() {
        // Vérifie si la grille est pleine
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (grid[row][col] == 0) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean solve() {
        // Résout la grille de Sudoku (implémentation à compléter)
        return solveSudoku();
    }

    private boolean solveSudoku() {
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (grid[row][col] == 0) {
                    for (int num = 1; num <= 9; num++) {
                        if (isValidMove(row, col, num)) {
                            grid[row][col] = num;
                            if (solveSudoku()) {
                                return true;
                            }
                            grid[row][col] = 0;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    // Méthodes pour charger et sauvegarder la grille depuis un fichier (à implémenter)
}
import java.awt.event.*;
import javax.swing.JTextField;

public class SudokuController implements ActionListener {
    private SudokuGrid model;
    private SudokuView view;

    public SudokuController(SudokuGrid model, SudokuView view) {
        this.model = model;
        this.view = view;
        

        // Ajout du contrôleur aux zones de texte de la vue
        view.addController(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // Récupérer la source de l'événement
        Object source = e.getSource();

        // Parcourir les zones de texte de la grille
        JTextField[][] gridTextFields = view.getGridTextFields();
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (source == gridTextFields[row][col]) {
                    // Action spécifique à la zone de texte cliquée
                    // Par exemple, obtenir le numéro entré dans la case et le passer au modèle
                    String input = gridTextFields[row][col].getText();
                    if (!input.isEmpty()) {
                        try {
                            int num = Integer.parseInt(input);
                            model.setNumber(row, col, num);
                        } catch (NumberFormatException ex) {
                            // Gérer l'erreur si l'utilisateur entre un texte non numérique
                            view.showMessage("Veuillez entrer un numéro valide.");
                        }
                    }
                }
            }
        }
    }
}

import javax.swing.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class SauvegardeController {
    public void saveData(int[][] sudokuGridData, JFrame frame) {
        JFileChooser fileChooser = new JFileChooser();
        int userSelection = fileChooser.showSaveDialog(frame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            try {
                String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
                for (int i = 0; i < 9; i++) {
                    for (int j = 0; j < 9; j++) {
                        if (sudokuGridData[i][j] == 0) {
                            writer.write('.');
                        } else {
                            writer.write(String.valueOf(sudokuGridData[i][j]));
                        }
                    }
                    writer.newLine();
                }
                writer.close();
                System.out.println("Données sauvegardées avec succès.");
            } catch (IOException e) {
                System.err.println("Erreur lors de la sauvegarde des données : " + e.getMessage());
            }
        }
    }
}

import javax.swing.*;
import java.awt.*;

public class MenuView {
    private JFrame frame;
    private JPanel panel;
    private JButton jouerButton;
    private JButton commentJouerButton;
    private JButton quitterButton;

    public MenuView() {
        frame = new JFrame();
        frame.setSize(600, 360);
        frame.setLocation(100, 100);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        ImageIcon backgroundIcon = new ImageIcon("Menu.png"); 
        Image backgroundImage = backgroundIcon.getImage().getScaledInstance(frame.getWidth(), frame.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon scaledBackgroundIcon = new ImageIcon(backgroundImage);
        JLabel backgroundLabel = new JLabel(backgroundIcon);

        panel = new JPanel();
        panel.setOpaque(false);
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        jouerButton = new JButton("Jouer");
        commentJouerButton = new JButton("Comment jouer ?");
        quitterButton = new JButton("Quitter");

        Font buttonFont = new Font(jouerButton.getFont().getName(), Font.PLAIN, 18);
        jouerButton.setFont(buttonFont);
        commentJouerButton.setFont(buttonFont);
        quitterButton.setFont(buttonFont);

        jouerButton.addActionListener(e -> {
            frame.setVisible(false); // Masquer la fenêtre du menu
        });

        panel.add(jouerButton);
        panel.add(commentJouerButton);
        panel.add(quitterButton);

        backgroundLabel.setLayout(new BorderLayout());
        backgroundLabel.add(panel, BorderLayout.CENTER);

        frame.setContentPane(backgroundLabel);
        


        frame.add(panel, BorderLayout.SOUTH);
    }

    public void show() {
        frame.setVisible(true);
    }

    public JButton getJouerButton() {
        return jouerButton;
    }

    public JButton getCommentJouerButton() {
        return commentJouerButton;
    }

    public JButton getQuitterButton() {
        return quitterButton;
    }

    public void showMessage(String message) {
        JOptionPane.showMessageDialog(frame, message);
    }


    public JFrame getFrame() {
        return frame;
    }
}

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public class MenuController implements ActionListener {
    private JFrame fenetre;
    private JButton jouerButton;
    private JButton commentJouerButton;
    private JButton quitterButton;

    public MenuController(JFrame fenetre, JButton jouerButton, JButton commentJouerButton, JButton quitterButton) {
        this.fenetre = fenetre;
        this.jouerButton = jouerButton;
        this.commentJouerButton = commentJouerButton;
        this.quitterButton = quitterButton;
    }

    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if (source == jouerButton) {
            fenetre.dispose(); // Fermer la fenêtre du menu
            SudokuView sudokuView = new SudokuView(); // Créer une nouvelle instance de SudokuView
            sudokuView.display(); // Afficher la fenêtre Sudoku
        } else if (source == commentJouerButton) {
            // Logique pour afficher les instructions
        } else if (source == quitterButton) {
            System.exit(0); // Quitter l'application
        }
    }
} 

import javax.swing.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;


public class Main {
    public static void main(String[] args) {
        // Création de la vue du menu
        MenuView menuView = new MenuView();

        // Obtention des boutons du menu
        JButton jouerButton = menuView.getJouerButton();
        JButton commentJouerButton = menuView.getCommentJouerButton();
        JButton quitterButton = menuView.getQuitterButton();

        // Création du contrôleur du menu
        JFrame frame = menuView.getFrame(); // Obtenez la JFrame de la vue du menu
        MenuController menuController = new MenuController(frame, jouerButton, commentJouerButton, quitterButton);

        // Ajout du contrôleur du menu aux boutons du menu
        jouerButton.addActionListener(menuController);
        commentJouerButton.addActionListener(menuController);
        quitterButton.addActionListener(menuController);

        // Affichage de la vue du menu
        menuView.show();
    }
}

import javax.swing.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class ChargerSauvegardeController {
    public int[][] loadGridData(String filePath, JFrame frame) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            int[][] gridData = new int[9][9];
            String line;
            int row = 0;
            while ((line = reader.readLine()) != null && row < 9) {
                for (int col = 0; col < 9 && col < line.length(); col++) {
                    char c = line.charAt(col);
                    if (c == '.') {
                        gridData[row][col] = 0;
                    } else if (Character.isDigit(c)) {
                        gridData[row][col] = Character.getNumericValue(c);
                    } else {
                        gridData[row][col] = -1;
                    }
                }
                row++;
            }
            reader.close();
            System.out.println("Grille chargée avec succès.");
            return gridData;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Erreur lors du chargement de la grille : " + e.getMessage());
        }
        return null;
    }
}
